generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  address     String       @unique
  createdAt   DateTime     @default(now())
  activities  Activity[]
  investments Investment[]
  projects    Project[]    @relation("UserProjects")
  votes       Vote[]
  reviewVotes ReviewVote[]
  reviewsGiven Review[]      @relation("UserReviews")
}

model Project {
  id               String       @id @default(uuid())
  ipId             String?      @unique
  title            String
  description      String
  category         String
  tokenSymbol      String
  totalSupply      String // Always set to "100" for royalty tokens (max 100 tokens per project)
  totalFunding     String
  initialPrice     String
  licenseType      String
  royaltyRate      String
  nftContract      String
  tokenId          String
  createdAt        DateTime     @default(now())
  creatorAddress   String
  ipfsMetadataHash String?
  nftMetadataHash  String?
  currentFunding   String
  status           String
  tokenPrice       String
  activities       Activity[]
  documents        Document[]
  investors        Investment[]
  licenses         License[]
  milestones       Milestone[]
  creator          User         @relation("UserProjects", fields: [creatorAddress], references: [address])
  proposals        Proposal[]
  royaltyToken     RoyaltyToken? @relation("ProjectRoyaltyToken")
  reviews          Review[]
}

model Milestone {
  id          String  @id @default(uuid())
  projectId   String
  title       String
  description String
  funding     String
  project     Project @relation(fields: [projectId], references: [id])
}

model License {
  id                     String   @id @default(uuid())
  projectId              String
  type                   String
  commercialUse          Boolean
  commercialRevShare     Int
  derivativesAllowed     Boolean
  derivativesAttribution Boolean
  researchUseAllowed     Boolean
  dataSharingRequirement String
  derivativeRoyaltyShare Int
  attachedAt             DateTime @default(now())
  project                Project  @relation(fields: [projectId], references: [id])
}

model Document {
  id         String   @id @default(uuid())
  projectId  String
  url        String
  uploadedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id])
}

model Investment {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  amount    String
  tokens    String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Proposal {
  id          String   @id @default(uuid())
  projectId   String
  title       String
  description String
  status      String
  endsAt      DateTime
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
  votes       Vote[]
}

model Vote {
  id         String   @id @default(uuid())
  proposalId String
  userId     String
  choice     String
  weight     String
  createdAt  DateTime @default(now())
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Activity {
  id        String   @id @default(uuid())
  userId    String?
  projectId String?
  type      String
  message   String
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model RoyaltyToken {
  id        String   @id @default(uuid())
  ipId String   @unique
  address   String
  createdAt DateTime @default(now())
  project   Project  @relation("ProjectRoyaltyToken", fields: [ipId], references: [ipId])
}

model Review {
  id          String      @id @default(uuid())
  projectId   String
  reviewerId  String      // User.id (wallet address)
  content     String      // Review text or IPFS hash
  rating      Int         // 1-5
  createdAt   DateTime    @default(now())
  status      String      // 'pending', 'approved', 'rejected'
  votes       ReviewVote[]
  rewarded    Boolean     @default(false)
  project     Project     @relation(fields: [projectId], references: [id])
  reviewer    User        @relation("UserReviews", fields: [reviewerId], references: [id])
}

model ReviewVote {
  id        String   @id @default(uuid())
  reviewId  String
  voterId   String   // User.id (wallet address)
  value     Int      // +1 or -1
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])
  voter     User     @relation(fields: [voterId], references: [id])
}
