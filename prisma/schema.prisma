// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  address     String       @unique
  projects    Project[]    @relation("UserProjects")
  investments Investment[]
  votes       Vote[]
  activities  Activity[]
  createdAt   DateTime     @default(now())
}

model Project {
  id               String      @id @default(uuid())
  title            String
  description      String
  category         String
  tokenSymbol      String
  totalSupply      String
  totalFunding     String
  initialPrice     String
  licenseType      String
  royaltyRate      String
  nftContract      String
  tokenId          String
  createdAt        DateTime    @default(now())
  creatorAddress   String
  creator          User?       @relation("UserProjects", fields: [creatorAddress], references: [address])
  status           String      // e.g. "Active", "Completed", "Pending"
  currentFunding   String      // Current amount funded
  tokenPrice       String      // Current token price
  investors        Investment[]
  ipfsMetadataHash String?
  nftMetadataHash  String?
  milestones       Milestone[]
  licenses         License[]
  documents        Document[]
  proposals        Proposal[]
  activities       Activity[]
}

model Milestone {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  funding     String
}

model License {
  id                      String   @id @default(uuid())
  project                 Project  @relation(fields: [projectId], references: [id])
  projectId               String
  type                    String
  commercialUse           Boolean
  commercialRevShare      Int
  derivativesAllowed      Boolean
  derivativesAttribution  Boolean
  researchUseAllowed      Boolean
  dataSharingRequirement  String
  derivativeRoyaltyShare  Int
  attachedAt              DateTime @default(now())
}

model Document {
  id         String   @id @default(uuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  url        String
  uploadedAt DateTime @default(now())
}

model Investment {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  amount     String   // Amount invested
  tokens     String   // Number of tokens held
  createdAt  DateTime @default(now())
}

model Proposal {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  status      String   // e.g. "Active", "Closed"
  endsAt      DateTime
  votes       Vote[]
  createdAt   DateTime @default(now())
}

model Vote {
  id         String   @id @default(uuid())
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  choice     String   // "Yes" or "No"
  createdAt  DateTime @default(now())
}

model Activity {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?
  type       String   // e.g. "Milestone", "Dividend", "Proposal"
  message    String
  createdAt  DateTime @default(now())
}
